" syntax highlighting
syn on
" " but turn syntax highlighting off if we're working with a huge file
au BufReadPost * if getfsize(bufname("%")) > 204800 | set syntax= | endif

" theme
set background=light
colorscheme lucius
LuciusLightLowContrast

" theme customization
if (g:colors_name =~ "solarized")
    autocmd ColorScheme * hi Normal ctermbg=015
    autocmd ColorScheme * hi LineNr ctermfg=253 ctermbg=none cterm=none
    autocmd ColorScheme * hi CursorLine ctermbg=255 cterm=none
    autocmd ColorScheme * hi CursorColumn ctermbg=255 cterm=none
    autocmd ColorScheme * hi StatusLine ctermfg=254 ctermbg=237
    autocmd ColorScheme * hi StatusLineNC ctermfg=254 ctermbg=248
    autocmd ColorScheme * hi VertSplit ctermfg=254 ctermbg=254 cterm=none
    autocmd ColorScheme * hi Search ctermbg=230 cterm=none
    autocmd ColorScheme * hi Comment ctermfg=248 ctermbg=231 cterm=none
    if has("gui")
        autocmd ColorScheme * hi Normal guibg=#ffffff
        autocmd ColorScheme * hi LineNr guifg=#E0E0E0 guibg=none gui=none
        autocmd ColorScheme * hi CursorLine guibg=#F1F1F1 gui=none
        autocmd ColorScheme * hi CursorColumn guibg=#F1F1F1 gui=none
        autocmd ColorScheme * hi StatusLine guifg=#E9E9E9 guibg=#4A4A4A
        autocmd ColorScheme * hi StatusLineNC guifg=#E9E9E9 guibg=#B6B6B6
        autocmd ColorScheme * hi VertSplit guifg=#E9E9E9 guibg=#E9E9E9 gui=none
        autocmd ColorScheme * hi Search guibg=#FEFDDE gui=none
        autocmd ColorScheme * hi Comment guifg=#B6B6B6 guibg=231 gui=none
    endif
endif

" set up syntastic to not run on save
let g:syntastic_mode_map = { 'mode': 'passive',
\ 'active_filetypes': [],
\ 'passive_filetypes': [] }
" map synstastic call to leader s
map <leader>s :SyntasticCheck<CR>
" tell syntastic to use our prod ruleset
let g:syntastic_phpcs_conf = "--standard=/home/".expand($USER)."/development/Etsyweb/tests/standards/stable-ruleset.xml"

" Use leader-n to open NERDTree
map <leader>n :NERDTreeToggle<CR>
" Open NERDTree automatically when VIM opens
"autocmd vimenter * NERDTree
" Disable the NERDTree fancy arrows
let NERDTreeDirArrows=0


""
"" NERDTree Custimzations
""
augroup AuNERDTreeCmd
autocmd AuNERDTreeCmd vimenter * call s:CdIfDirectory(expand("<amatch>"))

function s:CdIfDirectory(directory)
    NERDTree
    let directoryString = split(a:directory, "/NERD_tree")[0]

    let explicitDirectory = isdirectory(directoryString)
    let directory         = explicitDirectory || empty(directory)

    echo a:directory
    if explicitDirectory
        exe "cd " . fnameescape(directoryString)
    endif

    " Allows reading from stdin
    " ex: git diff | mvim -R -
    if strlen(directoryString) == 0
        return
    endif

    if directory
        wincmd p
        bd
    endif

    if explicitDirectory
        wincmd p
    endif
endfunction

""
"" CtrlP Customizations
""
let g:ctrlp_clear_cache_on_ext = 0
let g:ctrlp_cache_dir = "~/.ctrlp"
let g:ctrlp_switch_buffer= "Et"
map <leader>p :CtrlP<CR>

function SetupCtrlP()
    " use git to get list of files rather than vimscript GLOBing
    let g:ctrlp_user_command  = ['.git', 'cd %s && git ls-files . -co --exclude-standard']
    let g:ctrlp_max_files     = 100000
    let g:ctrlp_switch_buffer = 1 "want to see .htaccess files

    " https://github.com/burke/matcher
    " use C binary for matching files rather than vimscript
    let goodmatch_vim = $HOME . "/.vim/goodmatch.vim"
    if filereadable(goodmatch_vim)
        exe 'source' goodmatch_vim
        let g:path_to_matcher = $HOME . "/development/matcher/matcher"
        let g:ctrlp_match_func = {  'match': 'GoodMatch' }
    endif
endfunction
call SetupCtrlP()

""
"" NERDCommenter Customizations
""
map <leader>c <plug>NERDCommenterToggle
